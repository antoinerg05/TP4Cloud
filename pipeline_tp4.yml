trigger:
  branches:
    include:
      - master  # Déclenche le pipeline sur la branche principale
  paths:
    exclude:
      - README.md  # Exclure des fichiers non nécessaires

pr:
  branches:
    include:
      - main  # Déclenche aussi le pipeline sur les Pull Requests vers main

variables:
  azureSubscription: 'SC-TP4'  # Remplace avec ton service de connexion Azure
  functionAppName: 'calcul-interets'
  artifactName: 'drop'

stages:
- stage: Build
  displayName: "Build et Tests"
  jobs:
  - job: Build
    displayName: "Build .NET et Exécution des Tests"
    pool:
      vmImage: "ubuntu-latest"

    steps:
    - task: UseDotNet@2
      displayName: "Utiliser .NET 8"
      inputs:
        packageType: "sdk"
        version: "8.0.x"
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        dotnet restore
        dotnet build --configuration Release --no-restore
        dotnet test --configuration Release --no-build --verbosity normal
      displayName: "Restaurer, Compiler et Tester"

    # 🚀 Vérification : Lister les fichiers avant l'archivage
    - script: |
        ls -laR $(System.DefaultWorkingDirectory)
      displayName: "Lister les fichiers avant l'archivage"

    # 🚀 Création de l'archive ZIP en excluant les fichiers protégés
    - task: ArchiveFiles@2
      displayName: "Créer l'Archive du Code"
      inputs:
        rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
        includeRootFolder: false
        archiveType: "zip"
        archiveFile: "$(Build.ArtifactStagingDirectory)/$(artifactName).zip"
        replaceExistingArchive: true
        verbose: true
        preserveFilePaths: false  # ⚠️ Empêche l'inclusion de fichiers système
        exclude: |
          **/run/cloud-init/**  # ⚠️ Exclure les fichiers système qui posent problème

    # 🚀 Publier l'Artifact pour le déploiement
    - publish: "$(Build.ArtifactStagingDirectory)/$(artifactName).zip"
      displayName: "Publier l'Artifact"
      artifact: "drop"

- stage: DeployFunction
  displayName: "Déployer l'Azure Function"
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: "Déploiement de la Function App"
    pool:
      vmImage: "ubuntu-latest"

    steps:
    - download: current
      artifact: "drop"

    - task: AzureFunctionApp@1
      displayName: "Déployer l'Azure Function"
      inputs:
        azureSubscription: "$(azureSubscription)"
        appType: "functionAppLinux"
        appName: "$(functionAppName)"
        package: "$(Pipeline.Workspace)/drop/$(artifactName).zip"
